/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏π‡∏ì size x size
 */
export const buildTimesTable = (size) => {
  const table = [];
  for (let r = 1; r <= size; r++) {
    const row = [];
    for (let c = 1; c <= size; c++) {
      row.push(r * c);
    }
    table.push(row);
  }
  return table;
};

/**
 * ‡∏™‡∏∏‡πà‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á (?) ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
 */
export const pickRandomHoles = (count, size, options = {}) => {
  const { dedupeSymmetric = false } = options;
  const availablePositions = [];

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ
  for (let r = 1; r <= size; r++) {
    for (let c = 1; c <= size; c++) {
      if (dedupeSymmetric && r > c) continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ñ‡∏£‡∏∂‡πà‡∏á‡∏•‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏´‡∏°‡∏î symmetric
      availablePositions.push(`r${r}c${c}`);
    }
  }

  // ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  const shuffled = [...availablePositions].sort(() => Math.random() - 0.5);
  return new Set(shuffled.slice(0, Math.min(count, shuffled.length)));
};

/**
 * ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö mm:ss
 */
export const formatTime = (ms) => {
  const seconds = Math.floor(ms / 1000);
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
};

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≠‡∏á (‡πÅ‡∏ô‡∏ß‡∏ó‡πÅ‡∏¢‡∏á)
 */
export const isPerfectSquare = (row, col) => row === col;

/**
 * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏°‡πÄ‡∏ä‡∏¢
 */
export const getScoreData = (holes, answers) => {
  let correct = 0;
  let total = 0;
  
  holes.forEach(holeId => {
    const [, r, c] = holeId.match(/r(\d+)c(\d+)/);
    const row = parseInt(r);
    const col = parseInt(c);
    const userAnswer = parseInt(answers[holeId] || '');
    const correctAnswer = row * col;

    total++;
    if (!isNaN(userAnswer) && userAnswer === correctAnswer) {
      correct++;
    }
  });

  const percentage = total > 0 ? Math.round((correct / total) * 100) : 0;
  
  let message = '';
  if (percentage >= 95) message = 'üéâ ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å‡πÄ‡∏•‡∏¢‡∏ô‡∏∞!';
  else if (percentage >= 85) message = 'üëç ‡πÄ‡∏Å‡πà‡∏á‡∏°‡∏≤‡∏Å! ‡∏≠‡∏µ‡∏Å‡∏ô‡∏¥‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡πá‡πÄ‡∏û‡∏≠‡∏£‡πå‡πÄ‡∏ü‡∏Ñ!';
  else if (percentage >= 70) message = 'üòä ‡∏î‡∏µ‡∏°‡∏≤‡∏Å! ‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏ù‡∏∂‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏ô‡∏∞!';
  else if (percentage >= 50) message = 'ü§î ‡∏û‡∏≠‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏≠‡∏á‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏™‡∏π‡∏ï‡∏£‡∏Ñ‡∏π‡∏ì‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ô‡∏∞!';
  else message = 'üí™ ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£! ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ù‡∏∂‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ô‡∏∞!';

  return { correct, total, percentage, message };
};